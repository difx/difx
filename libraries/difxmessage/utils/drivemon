#!/usr/bin/env python



PROGRAM = 'drivemon'
VERSION = '0.1'
VERDATE = '20110723'
AUTHOR  = 'Walter Brisken'

defaultgroup = "224.2.2.1"
defaultport  = 50200
defaultttl   = 3

from sys import argv, exit, stdout
from os import popen, getcwd, system, getenv, getpid, environ
from os.path import isfile, isdir
from string import split, strip, find, rfind, upper, lower
from time import time, asctime
from glob import glob
from copy import deepcopy
from xml.parsers import expat
import socket
import struct

verbose = 1


def usage():
	print '\n%s ver. %s  %s  %s\n' % (PROGRAM, VERSION, VERDATE, AUTHOR)
	print 'A program to request mk5daemon to send stats data from a Mark5 unit.\n'
	print 'Usage: drivemon [options] <unit>\n'
	print 'options can include:\n'
	print '  -h or --help'
	print '          print this usage info and exit\n'
	print '  -v or --verbose'
	print '          be more verbose\n'
	print '  -q or --quiet'
	print '          be quieter\n'
	print '<unit> is the name or number of the mark5 unit to probe\n'
	print 'Environment variables DIFX_MESSAGE_GROUP and DIFX_MESSAGE_PORT'
	print 'can be used to override the default group/port of %s/%d\n' % \
		(defaultgroup, defaultport)
	exit(0)

class Parser:

    def __init__(self):
        self._parser = expat.ParserCreate()
        self._parser.StartElementHandler = self.start
        self._parser.EndElementHandler = self.end
        self._parser.CharacterDataHandler = self.data
	self.vsn = ''
	self.type = ''
	self.slot = -1
	self.mjdStart = 0.0;
	self.mjdStop = 0.0
	self.bins = [0]*10
	self.ok = False
	self.unit = ''
	self.mpiId = -1
	self.id = ''
	self.tag = ''

    def feed(self, data):
        self._parser.Parse(data, 0)

    def close(self):
        self._parser.Parse("", 1) # end of data
        del self._parser # get rid of circular references

    def start(self, tag, attrs):
        self.tag = tag
        self.tmp = ''
        if tag == 'difxDriveStats' or tag == 'difxCondition':
                self.ok = True
		self.vsn = ''
		self.mjdStart = 0.0
		self.mjdStop = 0.0
		self.type = ''
		self.bins = []*10
		self.slot = -1

    def end(self, tag):
    	if tag[0:3] == 'bin':
		b = int(tag[3:])
		self.bins[b] = int(self.tmp)
        elif tag == 'vsn' and self.ok:
		self.vsn = self.tmp
	elif tag == 'slot':
		self.slot = self.slot
	elif tag == 'startMJD':
		self.mjdStart = float(self.tmp)
	elif tag == 'stopMJD':
		self.mjdStop = float(self.tmp)
	elif tag == 'from':
		self.unit = lower(self.tmp)
	elif tag == 'identifier':
		self.id = self.tmp
	elif tag == 'mpiProcessId':
		self.mpiId = int(self.tmp)

    def data(self, data):
            self.tmp = data

    def getinfo(self):
	if self.ok:
		statsstr = 'VSN=%s disk=%d mjd=%12.6f-%12.6f:' % (self.vsn, self.slot, self.mjdStart, self.mjdStop)
		for v in self.bins:
			statsstr = statsstr + (' %d' % v)
		return statsstr

	else:
		return ''

def run():
	maxlevel = 8
	
	port = getenv('DIFX_MESSAGE_PORT')
	if port == None:
		print 'DIFX_MESSAGE_PORT needs to be defined'
		exit(0)
	else:
		port = int(port)
	group = getenv('DIFX_MESSAGE_GROUP')
	if group == None:
		print 'DIFX_MESSAGE_GROUP needs to be defined'
		exit(0)

	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind(('', port))
	mreq = struct.pack("4sl", socket.inet_aton(group), socket.INADDR_ANY)
	s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

	try:
		while 1:
			try:
			    message = s.recv(8000)
			    if len(message) > 0 and message[0] == '<':
				p = Parser()
				p.feed(message)
				info = p.getinfo()
				p.close()
				if p.ok:
					print asctime(), info
			except socket.timeout:
				pass
	except KeyboardInterrupt:
		pass

run()
