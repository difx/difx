#!/usr/bin/env python3

#**************************************************************************
#   Copyright (C) 2008-2019 by Walter Brisken                             *
#                                                                         *
#   This program is free software; you can redistribute it and/or modify  *
#   it under the terms of the GNU General Public License as published by  *
#   the Free Software Foundation; either version 3 of the License, or     *
#   (at your option) any later version.                                   *
#                                                                         *
#   This program is distributed in the hope that it will be useful,       *
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#   GNU General Public License for more details.                          *
#                                                                         *
#   You should have received a copy of the GNU General Public License     *
#   along with this program; if not, write to the                         *
#   Free Software Foundation, Inc.,                                       *
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
#**************************************************************************

from sys import argv, exit
from os import chdir, popen, system, getcwd
from time import sleep

program = 'difxsniff'
version = '3.0'
verdate = '20191115'
author  = 'Walter Brisken'

def usage():
	print('\n%s ver. %s   %s %s' % (program, version, verdate, author))
	print('\nA program to "sniff" FITS files made by DiFX\n')
	print('Usage: ./difxsniff [options] <refant1> [<refant2> [...] ] <fitsfile1> [<fitsfile2> [...] ]')
	print('\nOptions can include:')
	print('  -h or --help : print this info and quit\n')
	print('One or more refant identified by a 1 or 2 letter code must be provided.\nAll baselines to each of these refants will be processed.\n')
	print('Each "fitsfile" is a FITS file made by difx2fits.  Each of these files must\nhave accompanying sniffer data files with extensions .acb , .apd, .wts\nand .xcb .\n')

def reverseapd(dataline):
	s = dataline.strip().split()
	strg = '%5d %8.5f %2d %-10s %2d %2d %-3s %-3s %2d' % \
		(int(s[0]), float(s[1]), int(s[2]), s[3], int(s[4]), int(s[5]), s[7], s[6], int(s[8]))
	n = int(s[8])
	for i in range(n):
		s2 = ' %10.4f %7.5f %10.4f %10.6f' % \
			(-float(s[9+4*i]), float(s[10+4*i]), -float(s[11+4*i]), -float(s[12+4*i]))
		strg += s2
	strg += '\n'
	return strg

# Executes a program wanting command line input.  The args here are those
# inputs in order.
def runold(pgm, args):
	print(pgm)
	p = popen(pgm, 'w')
	sleep(0.1)
	for a in args:
		sleep(0.05)
		p.write('%s\n' % a)
	p.close()

def run(pgm, args):
	cmd = pgm
	for a in args:
		cmd += ' %s' % a
	print('Executing: %s' % cmd)
	system(cmd)

def sniff(filebases, refants, dir, newNames):

	if len(dir) > 0:
		system('mkdir -p ' + dir)

	# make apdfile
	apd = open(dir+'datafile.lis', 'w')
	first = 1
	for f in filebases:
		f = open(f+'.apd', 'r')
		l = f.readline()
		if first:
			if l[0:8] != 'obscode:':
				apd.write('obscode:  ')
			apd.write(l)
			first = 0
		if len(refants) > 1:
			while 1:
				l = f.readline()
				if l == '':
					break
				for r in refants:
					if l.find(r) > 0:
						apd.write(d)
						break
		else:
			while 1:
				l = f.readline()
				if l == '':
					break
				s = l.split()
				if s[6] == refants[0]:
					apd.write(l);
				elif s[7] == refants[0]:
					apd.write(reverseapd(l))
		f.close()
	apd.close()

	# make wtsfile
	wts = open(dir+'wtsfile.lis.sum', 'w')
	first = 1
	for f in filebases:
		f = open(f+'.wts', 'r')
		l = f.readline()
		# only write the first line for the first file
		if first:
			first = 0
			wts.write(l)
		while 1:
			l = f.readline()
			if l == '':
				break
			wts.write(l)
		f.close()
	wts.close()

	# make acbandfile
	acb = open(dir+'acbandfile.lis', 'w')
	for f in filebases:
		f = open(f+'.acb', 'r')
		for l in f:
			acb.write(l)
		f.close()
	acb.close()

	# make xcbandfile
	xcb = open(dir+'xcbandfile.lis', 'w')
	for f in filebases:
		f = open(f+'.xcb', 'r')
		while 1:
			data = []
			l = f.readline()
			if l == '':
				break
			data.append(l)
			v = l.split()
			nif = int(v[-1])
			nch = int(v[-3])
			n = 2 + nif + nif*nch
			for i in range(1,n):
				l = f.readline()
				if l == '':
					print('premature end of file: ', (f+'.xcb'))
					break
				data.append(l)
			if len(data) != n:
				break;
			hasref = 0
			for r in refants:
				if data[2+nif].find(r) > 0:
					hasref += 1
			if hasref > 0:
				for l in data:
					xcb.write(l)
		f.close()
	xcb.close()
	
	if len(dir) > 0:
		chdir(dir)

	if newNames:
		base = filebases[0].split('/')[-1]
		apdfilename = '%s.apd.ps' % base
		wtsfilename = '%s.wts.ps' % base
		acbfilename = '%s.acb.ps' % base
		xcbfilename = '%s.xcb.ps' % base
	else:
		apdfilename = 'apdfile.ps'
		wtsfilename = 'wtsfile.ps'
		acbfilename = 'acbandfile.ps'
		xcbfilename = 'xcbandfile.ps'

	run('plotapd', ['datafile.lis',    '%s/vps' % apdfilename, 'ALL', 'ALL', ''])
	run('plotwt',  ['wtsfile.lis.sum', '%s/vps' % wtsfilename])
	run('plotbp',  ['acbandfile.lis',  '%s/vps' % acbfilename, ''])
	run('plotbp',  ['xcbandfile.lis',  '%s/vps' % xcbfilename, ''])
	
files = []
refants = []
if getcwd()[-7:] == 'sniffer':
	dir = getcwd() + '/'
else:
	dir = 'sniffer/'

if len(argv) < 2:
	usage()
	exit(0)

for a in argv[1:]:
	p = a.find('.FITS')
	if p < 1:
		p = a.find('.fits')
	if p > 0:
		files.append(a[:p])
	elif a.find('.') >= 0 and len(a) > 2:
		files.append(a)
	elif a.find('/') > 0:
		dir = a
	elif a[0] == '-':
		if a == '-h' or a == '--help':
			usage()
			exit(0)
		else:
			print('Error: unknown option : ' + a)
	else:
		refants.append(a.upper())

if len(files) == 0:
	print('Error: no input files provided')
	exit(0)

if len(refants) == 0:
	print('Error: no refants provided')
	exit(0)

if dir[-1] != '/':
	dir += '/'

if len(refants) == 1:
	dir += refants[0] + '/'

nFITS = 0
for f in files:
	if f[-5:] == '.FITS':
		nFITS += 1

if nFITS == 0:
	for f in files:
		sniff([f], refants, dir, True)
elif nFITS == len(files):
	sniff(files, refants, dir, False)
else:
	print('Error: mixed FITS files and file prefixes')

