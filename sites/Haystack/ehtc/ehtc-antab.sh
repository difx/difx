#!/bin/bash
#
# Script to generate an ANTAB plot with gnuplot.
#
# set defaults
[ -z "$decimation" ] && decimation=20
[ -z "$plotrange"  ] && plotrange='[][0:10]'
[ -z "$dayoffset"  ] && dayoffset=1
[ -z "$verb" ] && verb=false
[ "$verb" = 'true' -o "$verb" = 'false' ] || {
    echo verb must be true or false; exit 1; }
# help human
USAGE="$0 band pcal prod save [polconvert ANTAB files]

generates a comparison plot of ANTAB data provided by the QA2 package
with that generated by the individual polconvert tasks.  The default
operation is to make a plot \$label-\$pcal-antab.pdf from what is found in
the current directory.  The arguments are:
    band    lo|hi|b1|b2|b3|b4
    pcal    QA2 tarball product label
    prod    production label
    save    true or false to save gnuplot files
The true|false argument (if true) will retain plotting artifacts in the
current directory in case you want to mess with the plot.  The remaining
arguments may be a list of generated ANTAB files to use.  The default if
none are listed is to find all such files in the current directory.

A number of environment variables are available to modify the plot if
you need make some adjustments for understanding the plot or producing
different versions (default values are given):
    verb=$verb                  true or false for commentary
    decimation=$decimation      use one value out of this many
    plotrange=$plotrange        Hours and Tsys for gnuplot
    dayoffset=$dayoffset        offset in days for QA2 ANTAB files

The plotrange defaults to [][0:10] allowing for nominal Tsys performance.
On days with poor performance you should redo plots with a wider scale.

There are sometimes issues with doy calculations.  You may sometimes
need to set dayoffset to 0 to get the QA2 and local antabs to overlay.
"
# parse arguments
band=${1-'noband'}
pcal=${2-'nopcal'}
prod=${3-'noprod'}
save=${4-'false'}
[ $# -ge 3 ] || { echo "$USAGE" ; exit 1 ; }
[ "$save" = true ] && shift 4 || {
    save=false && shift 3
}
tag="$prod-$pcal-antab"
$verb && echo band $band pcal $pcal prod $prod save $save

# find the QA2 artifact -- i.e. mapping of BB_? names to EHT names
case $band in
b1) bb='BB_1' ;;
b2) bb='BB_2' ;;
lo|b3) bb='BB_3' ;;
hi|b4) bb='BB_4' ;;
esac
for artydir in APP.artifacts qa2-diagnostics/$pcal.TSYS_INFO
do
  qart="${pcal}.$artydir/${pcal}_${bb}_QA2.ANTAB"
  [ -f $qart ] && break
done
[ -f $qart ] || { echo QA2 antab $qart not found ; exit 2 ; }
$verb && echo qart $qart

# note the dpfu used in production and that used in QA2
[ -z "$dpfu" ] && dpfu='0.000'
DPFU='NDef.'
eval `awk 'NR==1{print $4;exit}' $qart`  # defines DPFU
dpfac=`echo $DPFU / $dpfu | bc -lq 2>&- | cut -c 1-6` || dpfix=''
[ -n "$dpfac" ] && dpfix=" ratio $dpfac" || dpfac=1.0
$verb && echo dpfac $dpfac

# find the polconvert products
[ $# -eq 1 ] && {
    [ -f $1 ] || { echo $1 not found ; exit 3; }
    tag=`basename $1`-$pcal
    $verb && echo plotting a single ANTAB to $tag
    true
} || {
    [ $# -gt 0 ] || set -- `ls *.polconvert-*/*ANTAB`
    [ $# -gt 0 ] || { echo no ANTAB files found to process ; exit 3 ; }
    $verb && echo found $# ANTABs to plot
}

# use awk for processing of the antab files
# NR>6 is processing for the data lines
awks='
BEGIN{d=0}
decimate && NR>6 && (NR)%'$decimation' != 0 {next;}
NR < 4 {next;}
NR==5 {NC=NF-1;NL=int(NC/2)+3;next;}
NR>6 && substr($2,2,1) ~/:/ {dy=$1;hr=substr($2,1,1);mn=substr($2,3,8);}
NR>6 && substr($2,3,1) ~/:/ {dy=$1;hr=substr($2,1,2);mn=substr($2,4,8);}
NR>6 && NF==3 {loc=$3;hic=$3}
NR>6 && NF>3 {loc=0.0;nlo=0; for(c=3; c<NL;c++){loc+=$c;nlo++;} loc = loc/nlo;}
NR>6 && NF>3 {hic=0.0;nhi=0; for(c=NL;c<NF;c++){hic+=$c;nhi++;} hic = hic/nhi;}
NR>6 {printf("%.8f  %.4f %.4f\n", (dsq+dy+hr/24.0+mn/1440.0),loc, hic);d+=1;}
END{if(d==0)print "nan nan nan";printf("#antablines=%d\n",d)}
'
# there was originally a bug that has since been fixed that required
# NR>6 && dy > dpy {dy=dy - dpy;}
# prior to the printf.  However, there is a new bug following a leap year.
# Until that is sorted out dsq is needed....

# build a data file; the first file being the QA2 estimate (color 0)
# and the rest are polconvert tables; in the process gather info for
# the titles and colors.  If the antab from QA2 is crap, still try
# to make a plot...
#
# 7 lines of header are found in every ANTAB, so if there are only 7
# lines, there is no data...
declare -a tit
qlines=`cat $qart | wc -l`
[ "$qlines" -gt 7 ] &&
    awk -v decimate=0 -v dsq=$dayoffset "$awks" $qart > $tag.out || {
    echo 'nan nan nan' > $tag.out && echo 'nan nan nan' >> $tag.out ; }
ndx=0
tit[0]="tit 'QA2 $band = $bb'"
map=`ls *jobs-map.txt 2>&-` || { echo map file not found ; exit 4; }
rm -f $tag.txt
for p
do
    ( echo '' ; echo '' ) >> $tag.out
    grep -v ^! $p | awk -v decimate=1 -v dsq=0 "$awks" >> $tag.out
    eval `tail -1 $tag.out | cut -c2-`
    echo $job $antablines >> $tag.txt
    ndx=$(($ndx + 1))
    job=`echo $p | cut -d_ -f2 | cut -d. -f1`
    tit[$ndx]="tit '"`awk '$1 == '$job' {print $3}' $map`"($job)'"
done
[ -s $tag.out ] || { echo problem awking data ; exit 4; }
$verb && echo generated data in $tag.out && echo qlines is $qlines &&
    echo "antabs `wc -l $tag.txt` with lines/antab"

# find last day and convert to hour for x axis mapping
head=`sed -e '/^$/d' -e '/nan/d' -e '/#/d' $tag.out | head -1 | cut -d. -f1`
h=`echo $head \* 24 | bc -lq`
last=`sed -e '/^$/d' -e '/nan/d' -e '/#/d' $tag.out | tail -1 | cut -d. -f1`
t=`echo $last \* 24 | bc -lq`
$verb &&
    echo "first hour (of year) is '$h' from first day $head" &&
    echo "last hour (of year) is '$t' from last day $last"

# this is a fix for crap qart files
[ $qlines -gt 7 ] || {
    $verb && echo making more lines since qart file has $qlines less than 7
    final=`tail -1 $tag.out | awk '{print $1}'`
    mv $tag.out $tag.tmp
    sed "s/nan nan nan/$final 0.0 0.0/" $tag.tmp > $tag.out
}

mtsys=`awk '{s+=$2;s+=$3;c+=2}END{print int(2*s/c)}' $tag.out`
[ $mtsys -gt 10 ] && echo "Warning, export plotrange='[][0:$mtsys]' suggested"
$verb && echo mtsys is $mtsys and $plotrange

taggy=`echo $tag | sed 's/_/-/g'`

# header
max=$(($ndx + 1))
sed 's/^....//' > $tag.gnu <<EOF
    set term pdfcairo enhanced size 10.56,8.16 font 'sans,12'
    set output '$tag.pdf'
    set key below box title \\
    'Targets(Job) by VLBIScan (<upper> and <lower> chans plotted)'
    set title '{/sans:Bold=16 $taggy [DPFU=$DPFU (in QA2) $dpfu (in PC)]$dpfix}'
    set ylabel 'T_{sys}' font 'sans:Bold'
    set xlabel 'Hours (0hr of day $last)' font 'sans:Bold'
    set palette rgbformulae 3,11,6
    unset colorbox
    set style line $max linetype 1 lc palette frac 1.0 ps 0.8 pt 2
EOF
# colors
idx=1
while [ $ndx -ge $idx ]
do
    sed 's/^........//' >> $tag.gnu <<....EOF
        cfr=(0.6 * $idx.0 / $max.0)
        set style line $idx linetype 1 lc palette frac cfr ps 0.4 pt 7
....EOF
    idx=$(($idx + 1))
done
# plot
starter="plot $plotrange '$tag.out'"
idx=1
while [ $ndx -ge $idx ]
do
    sed 's/^........//' >> $tag.gnu <<....EOF
        $starter in $idx u (\$1*24.0-$t):2 ${tit[$idx]} w p ls $idx, \\
            '' in $idx u (\$1*24.0-$t):3 notit w p ls $idx, \\
....EOF
    idx=$(($idx + 1))
    starter="    ''"
done
# coda
sed 's/^....//' >> $tag.gnu <<EOF
        '' in 0 u (\$1*24.0-$t):(\$2/$dpfac) ${tit[0]} w p ls $max
    set output
EOF

# make the plot
$verb && echo running gnuplot $tag.gnu
gnuplot $tag.gnu > $tag.err 2>&1
skipped=`grep Skipping $tag.err | wc -l`
erlines=`cat $tag.err | wc -l`
[ -s $tag.err ] && echo there were some errors noted in $tag.err &&
    echo $skipped of $erlines lines were warnings about no valid points

$save || { rm -f $tag.gnu $tag.out $tag.err; }

#
# eof vim: nospell
#
